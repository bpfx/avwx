
import boto3
import gzip
import urllib
from datetime import datetime
from dateutil import tz
from decimal import *


s3 = boto3.client('s3')
s3_client = boto3.client('s3')
db = boto3.resource('dynamodb')
table = db.Table('avWxMetar')

airportList = ['KDTO', 'KAFW', 'KSYI', 'KGLE', 'KTKI', 'KMTO']

from_zone = tz.gettz('Zulu')
to_zone = tz.gettz('America/Chicago')

DEBUG = True

wxFileGz = "/tmp/wxfile.gz"
wxFile = "/tmp/wxfile.csv"
wxRemoteFile = "https://aviationweather.gov/adds/dataserver_current/current/metars.cache.csv.gz"


def DEBUGIT (data):
    if DEBUG:
        print("DEBUG: " + data)

def lambda_handler(event, context):
    tmpfile = urllib.URLopener()
    try:
        tmpfile.retrieve(wxRemoteFile, wxFileGz)
        with gzip.open(wxFileGz,"rb") as f:
            file_content = f.read()
        f.close()
    except Exception as e:
        print(e)
        raise e
    with open(wxFile,"wb") as f:
      f.write(file_content)
    f.close()
    wxDataList = []
    ittr = 0
    with open(wxFile,"r") as f:
        for row in f.read().splitlines():
            wxDataListVar = row.split(",")
            wxDataList.append(wxDataListVar)
            #print(wxDataListVar)
            ittr = ittr + 1
    f.close()
    DEBUGIT("Length is:")
    print(len(wxDataListVar))
    #wxDataList = getWxFromFile()
    for ap in airportList:
        airportWx=getAirportWx(wxDataList, ap)
        rendData = buildData(airportWx)
        writeToDb(rendData)
        print(rendData)

def getAirportWx(theList,airport):
    for line in theList:
        try:
            if line[1] == airport:
                return line
        except IndexError:
            pass

def getWxFromFile():
    with open(wxFile, 'r') as csvFile:
        reader = csv.reader(csvFile)
        wxList = list(reader)
        return wxList

def buildData(inputData):
    location=inputData[1]
    localcurtime=convertTime(inputData[2])['local']
    zulucurtime = convertTime(inputData[2])['zulu']
    conditions=inputData[30]
    wind=makeWind(inputData[7],inputData[8],inputData[9])
    temperature=convertTemp(inputData[5])
    dewpoint=convertTemp(inputData[6])
    altimeter=round(float(inputData[11]), 2)
    vis = inputData[10]
    rawClouds = {'layer1': [inputData[22],inputData[23]],
            'layer2': [inputData[24],inputData[25]],
            'layer3': [inputData[26],inputData[27]],
            'layer4': [inputData[28],inputData[29]]
           }
    myClouds = buildClouds(rawClouds)
    renderedData = {
    "identifier":location,
    "tztime":localcurtime,
    "ztime":zulucurtime,
    "conditions":conditions,
    "wind":wind,
    "temperature":Decimal(str(temperature)),
    "dewpoint":Decimal(str(dewpoint)),
    "altimeter":Decimal(str(altimeter)),
    "visibility":vis,
    "clouds":myClouds
    }
    return renderedData

def convertTime(datet):
    # 2017-04-29T15:27:00Z
    utc = datetime.strptime(datet, '%Y-%m-%dT%H:%M:%SZ')
    utc = utc.replace(tzinfo=from_zone)
    central = utc.astimezone(to_zone)
    cTime = central.time()
    cDate = central.date()
    cFull = str(cTime) + " " + str(cDate)
    uTime = utc.time()
    uDate = utc.date()
    uFull = str(uTime) + " " + str(uDate)
    rdateT = {'local': cFull, 'zulu': uFull}
    return rdateT

def makeWind(direction, speed, gust):
    if gust != "":
        theWind = direction + "&#176" + " @ " + speed + "kts" + "G" + gust + "kts"
    else:
        theWind = direction + "&#176" + " @ " + speed + "kts"
    return theWind

def convertTemp(temp):
    return (float(temp)*1.8)+32

def buildClouds(rawClouds):
    prettyClouds = {}
    layerList = ['layer1','layer2','layer3','layer4']
    for entry in layerList:
        if rawClouds[entry][0] != "":
            prettyClouds[entry] = rawClouds[entry][0] + " " + rawClouds[entry][1]
    return prettyClouds

def writeToDb(data):
    table.put_item(Item=data)
